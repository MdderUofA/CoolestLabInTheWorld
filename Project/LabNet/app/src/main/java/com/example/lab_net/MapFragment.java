package com.example.lab_net;

import android.Manifest;
import android.annotation.SuppressLint;;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;

/**
 * MapFragment that loads up Google Map and generates and stores the device location, and
 * displays it on the map. User can also click on interactive map to change their location to
 * another point. Sends location coordinates continuously to MapActivity.
 * @author gurjogsingh
 * @version 1.0
 * @see MapActivity
 * @see CoordinateListener
 */

public class MapFragment extends Fragment {
    private static final String TAG = "TESTING" ;
    private FusedLocationProviderClient fusedLocationProviderClient;
    private double mainLongitude;
    private double mainLatitude;
    private Task<Location> locationResult;
    private Location lastKnownLocation;
    private double[] coordinates = new double[2];

    /**
     * Using lastKnownLocation generated by device and googleMap instance, location coordinates
     * are plotted on map. Marker and title are added on coordinate as well. Location is updated in
     * MainActivity.
     * @param lastKnownLocation
     * @param googleMap
     * @return void
     */
    public void putLocationOnMap(Location lastKnownLocation, GoogleMap googleMap){
        //Help from 'How to Implement Google Map Inside Fragment in Android Studio | GoogleMap | Android Coding'
        //by Android Coding (09/12/2020, YouTube) - https://www.youtube.com/watch?v=YCFPClPjDIQ

        mainLatitude = lastKnownLocation.getLatitude();
        mainLongitude = lastKnownLocation.getLongitude();
        Log.d(TAG, "onComplete: " + lastKnownLocation.getLatitude());
        coordinates[0] = mainLatitude;
        coordinates[1] = mainLongitude;
        Log.d(TAG, "onComplete: " + mainLatitude);
        sendLocation(coordinates);
        LatLng currentLocation = new LatLng(mainLatitude, mainLongitude);
        MarkerOptions markerOptions = new MarkerOptions();
        markerOptions.position(currentLocation);
        markerOptions.title(currentLocation.latitude + " : " + currentLocation.longitude);
        googleMap.clear();
        googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(
                currentLocation, 10
        ));
        googleMap.addMarker(markerOptions);
        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(
                currentLocation, 10
        ));
    }

    /**
     * Gets the device location from the system and calls putLocationOnMap to plot the coordinates.
     * Permission is suppressed here as the user can only reach here after giving permission
     * in MapActivity, so asking for permission again is not needed.
     * @param fusedLocationProviderClient
     * @param googleMap
     * @return void
     */

    @SuppressLint("MissingPermission")
    public void getLocation(FusedLocationProviderClient fusedLocationProviderClient, GoogleMap googleMap){
        //Help from 'Select Current Place and Show Details on a Map' by Google Developers
        //(03/17/2021, Apache 2.0) - https://developers.google.com/maps/documentation/android-sdk/current-place-tutorial
        locationResult = fusedLocationProviderClient.getLastLocation();
        locationResult.addOnCompleteListener(getActivity(), new OnCompleteListener<Location>() {
            @Override
            public void onComplete(@NonNull Task<Location> task) {
                if (task.isSuccessful()) {
                    lastKnownLocation = locationResult.getResult();
                    if (lastKnownLocation != null) {
                        putLocationOnMap(lastKnownLocation, googleMap);
                    } else {
                        Toast.makeText(getContext(), "Can't get location, please try again", Toast.LENGTH_LONG).show();
                    }
                }
            }});

    }

    /**
     * Creates map fragment and displays map and allows user to see device location and choose new
     * location.
     * @param inflater
     * @param container
     * @param savedInstanceState
     * @return View
     */
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_map, container, false);

        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(getActivity());

        SupportMapFragment supportMapFragment = (SupportMapFragment)
                getChildFragmentManager().findFragmentById(R.id.google_map);


        supportMapFragment.getMapAsync(new OnMapReadyCallback() {

            /**
             * Generates the map. Permission not needed again because user is already prompted in
             * MapActivity.
             * @param googleMap
             * @return void
             */
            @SuppressLint("MissingPermission")
            @Override
            public void onMapReady(GoogleMap googleMap) {

                    getLocation(fusedLocationProviderClient, googleMap);

                googleMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {
                    /**
                     * Waits for user's click on map to get new location and display the location on
                     * map and update it in MapActivity.
                     * @param latLng
                     */
                    @Override
                    public void onMapClick(LatLng latLng) {
                        MarkerOptions markerOptions = new MarkerOptions();
                        markerOptions.position(latLng);
                        markerOptions.title(latLng.latitude + " : " + latLng.longitude);
                        googleMap.clear();
                        googleMap.addMarker(markerOptions);
                        googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(
                                latLng, 15
                        ));
                        mainLatitude = latLng.latitude;
                        mainLongitude = latLng.longitude;
                        coordinates[0] = mainLatitude;
                        coordinates[1] = mainLongitude;
                        sendLocation(coordinates);
                    }
                });
            }
        });
        return view;
    }

    /**
     * Update coordinates in MapActivity.
     * @param coordinates
     * @return void
     */
    public void sendLocation(double[] coordinates){
        CoordinateListener coordinateListener = (CoordinateListener) getActivity();
        coordinateListener.getCoordinates(coordinates[0], coordinates[1]);
        Log.d(TAG, "sendLocation: " + coordinates[0] + coordinates[1]);
    }

    /** Gets FusedLocationProviderClient attribute
     *
     * @return fusedLocationProviderClient
     */
    public FusedLocationProviderClient getFusedLocationProviderClient() {
        return fusedLocationProviderClient;
    }

    /**
     * Sets FusedLocationProviderClient attribute
     * @param fusedLocationProviderClient
     */
    public void setFusedLocationProviderClient(FusedLocationProviderClient fusedLocationProviderClient) {
        this.fusedLocationProviderClient = fusedLocationProviderClient;
    }

    /**
     * Gets MainLongitude attribute
     * @return mainLongitude
     */
    public double getMainLongitude() {
        return mainLongitude;
    }

    /**
     * Sets MainLongitude attribute
     * @param mainLongitude
     */
    public void setMainLongitude(double mainLongitude) {
        this.mainLongitude = mainLongitude;
    }

    /**
     * Gets MainLatitude attribute
     * @return mainLatitude
     */
    public double getMainLatitude() {
        return mainLatitude;
    }

    /**
     * Sets MainLatitude attribute
     * @param mainLatitude
     */
    public void setMainLatitude(double mainLatitude) {
        this.mainLatitude = mainLatitude;
    }

    /**
     * gets LocationResult attribute
     * @return locationResult
     */
    public Task<Location> getLocationResult() {
        return locationResult;
    }

    /**
     * Sets LocationResult attribute
     * @param locationResult
     */
    public void setLocationResult(Task<Location> locationResult) {
        this.locationResult = locationResult;
    }

    /**
     * gets LastKnownLocation attribute
     * @return lastKnowLocation
     */
    public Location getLastKnownLocation() {
        return lastKnownLocation;
    }

    /**
     * sets LastKnownLocation attribute
     * @param lastKnownLocation
     */
    public void setLastKnownLocation(Location lastKnownLocation) {
        this.lastKnownLocation = lastKnownLocation;
    }

    /**
     * gets Coordinates attribute
     * @return coordinates
     */
    public double[] getCoordinates() {
        return coordinates;
    }

    /**
     * sets Coordinates attribute
     * @param coordinates
     */
    public void setCoordinates(double[] coordinates) {
        this.coordinates = coordinates;
    }

}